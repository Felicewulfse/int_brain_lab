# int_brain_lab# Felice - 13 september 2022 - 10 november 2022# %reset -f # Remove list# Load packagesimport datajoint as djimport numpy as npimport pandas as pdimport osimport matplotlib.pyplot as pltimport seaborn as sns# Get/ set working directoryos. getcwd()os. chdir('/Users/felicewulfse/Library/Mobile Documents/com~apple~CloudDocs/Documents/Universiteit/MSc Applied Cognitive Psychology/Thesis/My_repo_int_brain_lab')# Make connection to the database    # dj.config['database.host'] = 'datajoint-public.internationalbrainlab.org'    # dj.config['database.user'] = 'ibl-public'    # dj.config['database.password'] = 'ibl-public'    # dj.conn()    # dj.config.save_local()#%%# create dj_local_config.json# dj_local_conf.json should be added to the .gitignore file in my repo so that my credentials don't end up on your public-facing repository on GitHub. # I have not done this, because my repo is on private and its not working right now. LOOK AT THIS LATER (13 sept)#%%# Investigate the data [done]# Import different tables from the data    # from nma_ibl import reference, subject, action, acquisition, data, behavior, behavior_analyses# Get the subjects and sessions data frames    # subjects = (subject.Subject * subject.SubjectLab * reference.Lab) # Includes a lot of unnecessary data    # subjects = subjects.proj('subject_nickname', 'sex', 'subject_birth_date', 'time_zone') # Query to the database for specific tables (not data yet)    # df_subjects = subjects.fetch(format='frame').sort_values(by=['lab_name', 'subject_nickname']).reset_index() # Get the datadf_subjects = pd.read_excel('/Users/felicewulfse/Library/Mobile Documents/com~apple~CloudDocs/Documents/Universiteit/MSc Applied Cognitive Psychology/Thesis/My_repo_int_brain_lab/df_subjects.xlsx')     # sessions =  behavior.TrialSet * behavior_analyses.PsychResults * behavior_analyses.ReactionTime * behavior_analyses.SessionTrainingStatus * (acquisition.Session & 'task_protocol LIKE "%training%"') * acquisition.SessionUser & subjects     # sessions = sessions.proj('n_trials', 'performance_easy', 'threshold', 'bias', 'lapse_low', 'lapse_high',     #                        'training_status', 'user_name',      #                        session_duration='TIMEDIFF(session_end_time,session_start_time)')    # df_sessions = sessions.fetch(format='frame').reset_index()df_sessions = pd.read_excel('/Users/felicewulfse/Library/Mobile Documents/com~apple~CloudDocs/Documents/Universiteit/MSc Applied Cognitive Psychology/Thesis/My_repo_int_brain_lab/df_sessions.xlsx')#%%# * Exercise 1 [done]    #  Write some code to save this newly created Pandas DataFrame as a csv file.    #  Make sure to avoid that this (large) datafile gets pushed to GitHub, for instance by creating a `/data` folder that is listed in your `.gitignore`.    #  Then, for any analysis you want to run, load in this local file - you'll now be able to get data without connecting to the DataJoint database.     #  Of course, you may need different datafiles for different purposes (at the level of animals, sessions, or trials). # df_subjects.to_csv('/Users/felicewulfse/Library/Mobile Documents/com~apple~CloudDocs/Documents/Universiteit/MSc Applied Cognitive Psychology/Thesis/My_repo_int_brain_lab/df_subjects.csv')# df_subjects.to_excel('/Users/felicewulfse/Library/Mobile Documents/com~apple~CloudDocs/Documents/Universiteit/MSc Applied Cognitive Psychology/Thesis/My_repo_int_brain_lab/df_subjects.xlsx') # df_sessions.to_csv('/Users/felicewulfse/Library/Mobile Documents/com~apple~CloudDocs/Documents/Universiteit/MSc Applied Cognitive Psychology/Thesis/My_repo_int_brain_lab/df_sessions.csv')# df_sessions.to_excel('/Users/felicewulfse/Library/Mobile Documents/com~apple~CloudDocs/Documents/Universiteit/MSc Applied Cognitive Psychology/Thesis/My_repo_int_brain_lab/df_sessions.xlsx')#%% # Exercise 2 [not fully done]    # Plot some basic information about all the sessions.     # When (at what time of day) where they collected?     # How many sessions were collected per lab, user, and animal?     # How does performance change as a function of each animal's progression in training?# Create new variable that defines the hour of the session timedf_sessions['session_dates'] = pd.to_datetime(df_sessions['session_start_time']).dt.datedf_sessions['session_time'] = pd.to_datetime(df_sessions['session_start_time']).dt.timedf_sessions['session_time_hour'] = df_sessions['session_time'].apply(lambda x:x.hour)# Write dataframe with new variable to excel# df_sessions.to_excel('/Users/felicewulfse/Library/Mobile Documents/com~apple~CloudDocs/Documents/Universiteit/MSc Applied Cognitive Psychology/Thesis/My_repo_int_brain_lab/df_sessions.xlsx')# When the data is collectedplt.hist(x=df_sessions['session_time_hour'])# The number of sessions per labdf_subjects['lab_name'].value_counts().plot(kind='bar')# The number of sessions per userdf_sessions['user_name'].value_counts().plot(kind='bar')# The number of sessions per animaldf_sessions['subject_uuid'].value_counts().plot(kind='bar')# Performance change per individual df_performance = df_sessions[['subject_uuid','performance_easy']].head(50).copy() # Save only 50 rows to check whether it worksdf_performance.groupby("subject_uuid").plot(kind = "kde") # Create new dataframe with a new id (a number instead of a character)s = df_performance[['subject_uuid']].stack()s[:] = s.factorize()[0] + 1df_performance = s.unstack(1).add_suffix('_new').join(df_performance)# Save the new dataframedf_performance = df_performance[['subject_uuid_new', "performance_easy"]]plt.plot(df_performance[["performance_easy"]], linestyle = "dotted") # Plot solely the performance    # plt.plot(df_performance.groupby("subject_uuid_new").plot(kind='kde', ax=plt.gca())) # Does not work [setting an array element with a sequence.]#%%# Exercise 3 [done]    # get more detailed info not at the session level (overall accuracy on easy stimuli), but at the individual trial level.     # You can use `sessions * behavior.TrialSet.Trial` to get this, but be warned that this will become huge/slow quickly.     # Better to first restrict to a subset of sessions (e.g. from one mouse), or to use `.proj` to select only those attributes of the `TrialSet` that you really need.     # See [here](https://github.com/int-brain-lab/paper-behavior/blob/master/figure3ab_psychfuncs.py#L41) for an example.# trial_fields = ('trial_stim_contrast_left',#                    'trial_stim_contrast_right',#                    'trial_response_time',#                    'trial_stim_prob_left',#                    'trial_feedback_type',#                    'trial_stim_on_time',#                    'trial_response_choice')# trials = (behavior.TrialSet.Trial & sessions).proj(*trial_fields)# df_trials = trials.fetch(format = "frame").reset_index()df_trials = pd.read_csv('/Users/felicewulfse/Library/Mobile Documents/com~apple~CloudDocs/Documents/Universiteit/MSc Applied Cognitive Psychology/Thesis/My_repo_int_brain_lab/df_trials.csv')# df_trials.to_csv('/Users/felicewulfse/Library/Mobile Documents/com~apple~CloudDocs/Documents/Universiteit/MSc Applied Cognitive Psychology/Thesis/My_repo_int_brain_lab/df_trials.csv')# df_trials.to_excel('/Users/felicewulfse/Library/Mobile Documents/com~apple~CloudDocs/Documents/Universiteit/MSc Applied Cognitive Psychology/Thesis/My_repo_int_brain_lab/df_trials.xlsx')df_trials_shorter = df_trials.head(1000000)# Create new dataframe with a new id (a number instead of a character)s = df_trials_shorter[['subject_uuid']].stack()s[:] = s.factorize()[0] + 1df_trials_shorter = s.unstack(1).add_suffix('_new').join(df_trials_shorter)plt.plot(df_trials_shorter[["subject_uuid_new"]], type = "scatter")df_trials_shorter.plot()df_for_plot = df_trials_shorter[["trial_feedback_type","trial_response_time"]].head(10000)plt.scatter(df_for_plot[["trial_feedback_type"]], df_for_plot[["trial_response_time"]])plt.scatter(df_trials_shorter[["trial_stim_prob_left"]], df_trials_shorter[["trial_response_time"]])#%%# Exercise 4     # Recreate a figure from [the preprint](https://doi.org/10.1101/2020.01.17.909838), for instance figure 2a.     # Then compare your solution against the [code here](https://github.com/int-brain-lab/paper-behavior). 